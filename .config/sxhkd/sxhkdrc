# -----------------------------------------------------------------------------
# wm independent hotkeys
# vim:ft=sxhkdrc
# -----------------------------------------------------------------------------

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

# about
super + F2
    st -t 'st+ neofetch' -g 66x19+0+0 -e neofetch --loop

# launch Htop
ctrl + alt + Delete
    st -t 'st+ htop' -g 110x30+0+0 -e htop

# launch gping
ctrl + alt + End
    st -t 'st+' -g 90x28+0+0 -e gping google.com

# floating terminal emulator
super + ctrl + Return
	st -t 'st+'

# tabbed st
super + alt + Return
    tabbed -r 2 st -w ''

# program launcher
super + d
    $HOME/bin/dmenu-apps

# mager
XF86Launch1
    $HOME/bin/dmenu-mager

# quit dwm
super + shift + End
    $HOME/bin/rofi-power

# lock screen
super + shift + x
	$HOME/bin/lock-dark

# screenshot
Print
    $HOME/bin/scrot-full

super + Print
    $HOME/bin/dmenu-screenshot

super + shift + Print
    $HOME/bin/flameshot-imgck

# dmenu-record
super + shift + Pause
    $HOME/bin/dmenu-record

# pulseaudio controls speaker volume up & down
{XF86AudioRaiseVolume, XF86AudioLowerVolume}
    pamixer {-i 1, -d 1}; \
    ou_vol=$(pamixer --get-volume); \
    jack_stat=$($HOME/bin/has_headphone); \
    [ $jack_stat = "on" ] && icon="  Headset"; \
    [ $jack_stat = "off" ]  && icon="  Speaker"; \
    dunstify "$icon Output Volume: "$ou_vol -t 1000 -r 1

# pulseaudio controls mic volume up & down
shift + {XF86AudioRaiseVolume, XF86AudioLowerVolume}
    pamixer --source 1 {-i 1, -d 1}; \
    ou_mic=$(pamixer --source 1 --get-volume); \
    dunstify "  Microphone Input Volume: "$ou_mic -t 1000 -r 1

# pulseaudio controls monitor volume up & down
alt + {XF86AudioRaiseVolume, XF86AudioLowerVolume}
    pamixer --source 0 {-i 1, -d 1}; \
    ou_mon=$(pamixer --source 0 --get-volume); \
    dunstify "  Monitor Input Volume: "$ou_mon -t 1000 -r 1

# pulseaudio controls mute speaker
XF86AudioMute
    pamixer \
    --toggle-mute; \
    ou_mute=$(pamixer --get-mute); \
    jack_stat=$($HOME/bin/has_headphone); \
    [ $jack_stat = "on" ]   && icon_on="  Headset" icon_off="  Headset"; \
    [ $jack_stat = "off" ]    && icon_on="  Speaker" icon_off="  Speaker"; \
    [ $ou_mute   = "true" ]  && dunstify "$icon_off MUTED" -t 1000 -r 1; \
    [ $ou_mute   = "false" ] && dunstify "$icon_on UNMUTED" -t 1000 -r 1

# pulseaudio controls mute mic
shift + XF86AudioMute
    pamixer \
    --source 1 --toggle-mute; \
    in_mute=$(pamixer --source 1 --get-mute); \
    [ $in_mute = "true" ]  && dunstify "  Microphone Input MUTED" -t 1000 -r 1; \
    [ $in_mute = "false" ] && dunstify "  Microphone Input UNMUTED" -t 1000 -r 1

# pulseaudio controls mute monitor
alt + XF86AudioMute
    pamixer \
    --source 0 --toggle-mute; \
    mo_mute=$(pamixer --source 0 --get-mute); \
    [ $mo_mute = "true" ]  && dunstify "  Monitor Input MUTED" -t 1000 -r 1; \
    [ $mo_mute = "false" ] && dunstify "  Monitor Input UNMUTED" -t 1000 -r 1

# screen brightness controls
{XF86MonBrightnessUp, XF86MonBrightnessDown}
    xbacklight {-inc 5, -dec 5}; \
    get_brightness=$(xbacklight -get | cut -f 1 -d '.'); \
    dunstify "  Brightness: "$get_brightness -t 1000 -r 1

super + F3
    monitors=$(xrandr --listmonitors | grep 'Monitors:' | tr -d "Monitors: "); \
    if [ $monitors = "2" ]; \
    then feh --bg-fill -Z $WALLPAPER3 --bg-fill -Z $WALLPAPER1; \
    else feh --bg-fill -Z $WALLPAPER3; \
    fi

super + F4
    monitors=$(xrandr --listmonitors | grep 'Monitors:' | tr -d "Monitors: "); \
    if [ $monitors = "2" ]; \
    then feh --bg-fill -Z $WALLPAPER1 --bg-fill -Z $WALLPAPER1; \
    else feh --bg-fill -Z $WALLPAPER1; \
    fi

super + shift + F4
    monitors=$(xrandr --listmonitors | grep 'Monitors:' | tr -d "Monitors: "); \
    if [ $monitors = "2" ]; \
    then feh --bg-fill -Z $WALLPAPER2 --bg-fill -Z $WALLPAPER1; \
    else feh --bg-fill -Z $WALLPAPER2; \
    fi

# application tools on Fn Button
super + F1
    $HOME/bin/keybind-helper

# networkmanager-dmenu
super + F8
    /usr/bin/networkmanager_dmenu

# dmenu-udiskie
super + F6
    UDISKIE_DMENU_LAUNCHER="rofi" dmenu-udiskie -matching regex \
    -dmenu -i -no-custom -multi-select -p "UDISKIE" -lines 5 -width 300 \
    -kb-accept-alt "" -kb-custom-1 "Shift+Return"

# arandr
super + F7
    $HOME/bin/dmenu-monitor

# gromit-mpx
super + F9
    gromit-mpx

# webcam with ffplay
super + ~F10
	{$HOME/bin/ffplay-launcher,pkill -x 'ffplay'}

# key-mon
super + ~F11
    {$HOME/bin/key-mon-launcher, killall key-mon}

# screenkey
super + shift + ~F11
    {screenkey, killall screenkey}

# toggle hide & show polybar
super + ~b
    {pkill -x "polybar"; sleep 1; dwmc togglebar; dwmc toggleextrabar, \
     dwmc togglebar; dwmc toggleextrabar; $HOME/.config/polybar/launch.sh &}

# restart polybar
super + ctrl + b
    pkill -x "polybar"; $HOME/.config/polybar/launch.sh &

# polybar tray
super + shift + ~b
    {$HOME/bin/polybar-tray on, $HOME/bin/polybar-tray off}

# polybar gap
super + shift + bracketright
    $HOME/bin/polybar-gap on

super + shift + bracketleft
    $HOME/bin/polybar-gap off

# clipmenu
super + {_,shift} + p
    {/usr/bin/clipmenu, /usr/bin/clipdel -d "."}

# rofi-emoji
super + e
    $HOME/bin/rofi-emoji-run

# application tab
super + grave
    $HOME/bin/rofi-application-tab

# translate-shell
super + Pause
    $HOME/bin/dmenu-trans

# dmenu-pass
super + {_,shift} + backslash
    {$HOME/bin/passtore 0, $HOME/bin/dmenu-pass}
