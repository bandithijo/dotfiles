#!/bin/sh

# Usage:
# `record`: Ask for recording type via dmenu
# `record screencast`: Record both audio and screen
# `record video`: Record only screen
# `record audio`: Record only audio
#
# If there is already a running instance, user will be prompted to end it.

# DMENU="/usr/local/bin/dmenu"
DMENU="/usr/bin/rofi -dmenu -lines 3 -width 200"

updateicon() {
    echo "$1" > ~/.recordingicon
}

updatestatus() {
    echo "$1" > ~/.recordingstat
}

killRecording() {
    recpid="$(cat ~/.recordingpid)"
    # kill with SIGTERM, allowing finishing touches.
    kill -15 "$recpid"
    rm -f ~/.recordingpid
    rm -f ~/.recordingstat
    updateicon ""
    exit
}

# screenCast() {
#     ffmpeg \
#     -f x11grab \
#     -draw_mouse 1 \
#     -framerate 30 \
#     -s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
#     -i :0.0+0,0 \
#     -f pulse -i alsa_output.pci-0000_00_1b.0.analog-stereo.monitor \
#     -f pulse -i alsa_input.pci-0000_00_1b.0.analog-stereo \
#     -filter_complex amix=inputs=2 \
#     -c:a aac \
#     -c:v libx264 -pix_fmt yuv420p -qp 18 -q:v 1 \
#     -threads 4 \
#     "$HOME/vid/ScreenRecorder/screencast-$(date '+%y%m%d-%H%M-%S').mp4" &
#     echo $! > ~/.recordingpid
#     updateicon " REC "
#     updatestatus "record"
# }

# ffmpeg -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100 -i video.mp4 -c:v copy -c:a aac -shortest video-out.mp4

    # -s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
videoOnly() {
    ffmpeg \
    -f x11grab \
    -draw_mouse 1 \
    -framerate 30 \
    -s $1 \
    -i $(echo $DISPLAY).0+$3,$4 \
    -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=44100 \
    -vf setpts=N/FR/TB \
    -c:v libx264 -pix_fmt yuv420p -preset veryfast -q:v 1 \
    -threads 4 \
    "$HOME/vid/ScreenRecorder/video-$(date '+%y%m%d-%H%M-%S').mp4" &
    echo $! > ~/.recordingpid
    updateicon " REC "
    updatestatus "record"
}

injectMutedAudioToVideo() {
    ffmpeg_inject_muted_audio
}

injectMutedAudioToVideoVoko() {
    ffmpeg_inject_muted_audio_voko
}

injectFrame() {
    ffmpeg_inject_frame
    updateicon " FRM "
}

audioOnly() {
    ffmpeg \
    -f pulse -i default \
    -c:a flac \
    "$HOME/vid/audio-$(date '+%y%m%d-%H%M-%S').flac" &
    echo $! > ~/.recordingpid
    updateicon " REC "
    updatestatus "record"
}

pauseRecording() {
    pkill -STOP ffmpeg
    updateicon " REC "
    updatestatus "pause"
}

resumeRecording() {
    pkill -CONT ffmpeg
    updateicon " REC "
    updatestatus "record"
}

asktoEnd() { \
    response=$(printf "Pause\nNo\nYes" | $DMENU -p " End Recording") &&
    [ "$response" = "Pause" ] && pauseRecording
    [ "$response" = "Yes" ] && killRecording
    exit
}

asktoResume() { \
    response=$(printf "Resume" | $DMENU -p " Resume Recording") &&
    [ "$response" = "Resume" ] && resumeRecording
    exit
}

if [ -f ~/.recordingpid ]; then
    if grep -q "record" ~/.recordingstat; then
        asktoEnd
        exit
    elif grep -q "pause" ~/.recordingstat; then
        asktoResume
        exit
    fi
fi

choice=$(printf "Video\nAudio\nEffects ∇" | $DMENU -p " Record")
case "$choice" in
    "Video")
        monitors=$(xrandr --listmonitors | grep 'Monitors:' | tr -d "Monitors: ")
        if [ "$monitors" = "2" ]; then
            area=$(printf "All Screen\nLaptop\nMonitor" | $DMENU -p " Area")
            case "$area" in
                "All Screen") videoOnly $(xdpyinfo | grep dimensions | awk '{print $2;}') "0" "0";;
                "Laptop") videoOnly "1024x768" "576" "900";;
                "Monitor") videoOnly "1600x900" "0" "0";;
            esac
        else
            videoOnly $(xdpyinfo | grep dimensions | awk '{print $2;}') "0" "0"
        fi
        ;;
    "Audio") audioOnly;;
    "Effects ∇")
        effects=$(printf "Inject: Frame\nInject: MutedAudioVoko" | $DMENU -p " Effects")
        case "$effects" in
        "Inject: Frame") injectFrame;;
        "Inject: MutedAudioVoko") injectMutedAudioToVideoVoko;;
        esac
        ;;
esac

# Don't put comma on last array element!
# menu name         function name
# OPTIONS='''
# [
# ["Video",     "videos"],
# ["Audio",     "audioOnly"],
# ["Effects ", "effects"]
# ]
# '''
# obj_menu=$(echo $OPTIONS | jq -r ".[][0]" | $DMENU -i -p " ScreenShot:")
# obj_selected=$(echo $OPTIONS | jq -r ".[] | select(.[0] == \"$obj_menu\") | .[1]")

# if [ "$obj_selected" = "videos" ]; then
#     screen_size=$(xdpyinfo | grep dimensions | awk '{print $2;}')
#     monitors=$(xrandr --listmonitors | grep 'Monitors:' | tr -d "Monitors: ")
#     if [ "$monitors" = "2" ]; then
#         OPTIONS='''
#         [
#         ["All Monitor",         "videoOnly $screen_size '0' '0'"],
#         ["1st Monitor",         "videoOnly '1024x768' '576' '900'"],
#         ["2nd Monitor",         "videoOnly '1600x900' '0' '0'"]
#         ]
#         '''
#         obj_menu=$(echo $OPTIONS | jq -r ".[][0]" | $DMENU -i -p " Area:")
#         obj_selected=$(echo $OPTIONS | jq -r ".[] | select(.[0] == \"$obj_menu\") | .[1]")
#     else
#         obj_selected="videoOnly $(xdpyinfo | grep dimensions | awk '{print $2;}') '0' '0'"
#     fi

# elif [ "$obj_selected" = "effects" ]; then
#     OPTIONS='''
#     [
#     ["Inject: Frame",         "injectFrame"],
#     ["Inject: MuteAudioVoko", "injectMuteAudioToVideoVoko"]
#     ]
#     '''
#     obj_menu=$(echo $OPTIONS | jq -r ".[][0]" | $DMENU -i -p " Effects:")
#     obj_selected=$(echo $OPTIONS | jq -r ".[] | select(.[0] == \"$obj_menu\") | .[1]")
# fi

# $obj_selected
